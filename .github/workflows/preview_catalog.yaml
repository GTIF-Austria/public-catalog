


name: Preview catalog
on:
  pull_request_target:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
# do not allow running multiple of pipelines for this PR in parallel
concurrency: preview-${{ github.ref }}
jobs:
  preview_changed_files:
    runs-on: ubuntu-latest 
    permissions:
      contents: write
      pages: write
      pull-requests: write
      packages: read
    name: Deploy changed-files
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            submodules: 'true'
            ref: ${{ github.event.pull_request.head.ref }}
            repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: changed-files
        id: changed-files
        uses: tj-actions/changed-files@v45
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 
      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: python .github/update_catalog_last_changes_pr.py
      - name: Build
        env:
          SH_INSTANCE_ID: ${{ secrets.SH_INSTANCE_ID }}
          SH_CLIENT_ID: ${{ secrets.SH_CLIENT_ID }}
          SH_CLIENT_SECRET: ${{ secrets.SH_CLIENT_SECRET }}
        run: |
          docker pull ghcr.io/eodash/eodash_catalog:latest
          docker run -v "$PWD:/workspace" -w "/workspace" ghcr.io/eodash/eodash_catalog:latest eodash_catalog
      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./build/
      - name: Find existing comment
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions
          body-includes: 'üöÄ Preview ready!'
      - name: Create or update preview comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            üöÄ Preview ready!

            üëâ [View your dashboard preview](https://eodash.github.io/preview-instance/?stacEndpoint=https://GTIF-Austria.github.io/public-catalog/pr-preview/pr-${{ github.event.pull_request.number }}/GTIF-Austria/catalog.json )
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
      - name: Wait for GitHub Pages deployment workflow
        run: |
          echo "Waiting for GitHub Pages deployment to complete..."
          ATTEMPTS=0
          MAX_ATTEMPTS=30
          DELAY=10
      
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/runs \
              | jq '.workflow_runs[] | select(.name=="pages build and deployment")' \
              | jq -s 'sort_by(.run_started_at) | reverse | .[0]')
      
            STATUS=$(echo "$RUN" | jq -r '.status')
            CONCLUSION=$(echo "$RUN" | jq -r '.conclusion')
      
            echo "Current pages-build-deployment status: $STATUS / $CONCLUSION"
      
            if [[ "$STATUS" == "completed" ]]; then
              if [[ "$CONCLUSION" == "success" ]]; then
                echo "‚úÖ GitHub Pages deployment completed successfully."
                exit 0
              else
                echo "‚ùå GitHub Pages deployment failed."
                exit 1
              fi
            fi
      
            ATTEMPTS=$((ATTEMPTS+1))
            sleep $DELAY
          done
      
          echo "‚ö†Ô∏è Timed out waiting for GitHub Pages deployment."
          exit 1
